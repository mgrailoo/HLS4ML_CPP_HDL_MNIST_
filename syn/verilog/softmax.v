// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        data_4_V_read,
        data_5_V_read,
        data_6_V_read,
        data_7_V_read,
        data_8_V_read,
        data_9_V_read,
        res_0_V,
        res_0_V_ap_vld,
        res_1_V,
        res_1_V_ap_vld,
        res_2_V,
        res_2_V_ap_vld,
        res_3_V,
        res_3_V_ap_vld,
        res_4_V,
        res_4_V_ap_vld,
        res_5_V,
        res_5_V_ap_vld,
        res_6_V,
        res_6_V_ap_vld,
        res_7_V,
        res_7_V_ap_vld,
        res_8_V,
        res_8_V_ap_vld,
        res_9_V,
        res_9_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [11:0] data_0_V_read;
input  [11:0] data_1_V_read;
input  [11:0] data_2_V_read;
input  [11:0] data_3_V_read;
input  [11:0] data_4_V_read;
input  [11:0] data_5_V_read;
input  [11:0] data_6_V_read;
input  [11:0] data_7_V_read;
input  [11:0] data_8_V_read;
input  [11:0] data_9_V_read;
output  [11:0] res_0_V;
output   res_0_V_ap_vld;
output  [11:0] res_1_V;
output   res_1_V_ap_vld;
output  [11:0] res_2_V;
output   res_2_V_ap_vld;
output  [11:0] res_3_V;
output   res_3_V_ap_vld;
output  [11:0] res_4_V;
output   res_4_V_ap_vld;
output  [11:0] res_5_V;
output   res_5_V_ap_vld;
output  [11:0] res_6_V;
output   res_6_V_ap_vld;
output  [11:0] res_7_V;
output   res_7_V_ap_vld;
output  [11:0] res_8_V;
output   res_8_V_ap_vld;
output  [11:0] res_9_V;
output   res_9_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_0_V_ap_vld;
reg res_1_V_ap_vld;
reg res_2_V_ap_vld;
reg res_3_V_ap_vld;
reg res_4_V_ap_vld;
reg res_5_V_ap_vld;
reg res_6_V_ap_vld;
reg res_7_V_ap_vld;
reg res_8_V_ap_vld;
reg res_9_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [11:0] exp_table1_q0;
wire   [5:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [11:0] exp_table1_q1;
wire   [5:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [11:0] exp_table1_q2;
wire   [5:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [11:0] exp_table1_q3;
wire   [5:0] exp_table1_address4;
reg    exp_table1_ce4;
wire   [11:0] exp_table1_q4;
wire   [5:0] exp_table1_address5;
reg    exp_table1_ce5;
wire   [11:0] exp_table1_q5;
wire   [5:0] exp_table1_address6;
reg    exp_table1_ce6;
wire   [11:0] exp_table1_q6;
wire   [5:0] exp_table1_address7;
reg    exp_table1_ce7;
wire   [11:0] exp_table1_q7;
wire   [5:0] exp_table1_address8;
reg    exp_table1_ce8;
wire   [11:0] exp_table1_q8;
wire   [5:0] exp_table1_address9;
reg    exp_table1_ce9;
wire   [11:0] exp_table1_q9;
wire   [5:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [7:0] invert_table2_q0;
reg    ap_block_state1;
reg   [11:0] exp_res_0_V_reg_771;
wire    ap_CS_fsm_state2;
reg   [11:0] exp_res_1_V_reg_777;
reg   [11:0] exp_res_2_V_reg_783;
reg   [11:0] exp_res_3_V_reg_789;
reg   [11:0] exp_res_4_V_reg_795;
reg   [11:0] exp_res_5_V_reg_801;
reg   [11:0] exp_res_6_V_reg_807;
reg   [11:0] exp_res_7_V_reg_813;
reg   [11:0] exp_res_8_V_reg_819;
reg   [11:0] exp_res_9_V_reg_825;
wire    ap_CS_fsm_state3;
wire    grp_reduce_2_fu_328_ap_ready;
wire    grp_reduce_2_fu_328_ap_done;
wire    grp_reduce_2_fu_328_ap_start;
wire    grp_reduce_2_fu_328_ap_idle;
wire   [11:0] grp_reduce_2_fu_328_ap_return;
reg    grp_reduce_2_fu_328_ap_start_reg;
wire   [63:0] zext_ln250_fu_362_p1;
wire   [63:0] zext_ln250_1_fu_377_p1;
wire   [63:0] zext_ln250_2_fu_392_p1;
wire   [63:0] zext_ln250_3_fu_407_p1;
wire   [63:0] zext_ln250_4_fu_422_p1;
wire   [63:0] zext_ln250_5_fu_437_p1;
wire   [63:0] zext_ln250_6_fu_452_p1;
wire   [63:0] zext_ln250_7_fu_467_p1;
wire   [63:0] zext_ln250_8_fu_482_p1;
wire   [63:0] zext_ln250_9_fu_497_p1;
wire   [63:0] zext_ln258_fu_512_p1;
wire    ap_CS_fsm_state4;
wire   [5:0] y_V_fu_352_p4;
wire   [5:0] y_V_1_fu_367_p4;
wire   [5:0] y_V_2_fu_382_p4;
wire   [5:0] y_V_3_fu_397_p4;
wire   [5:0] y_V_4_fu_412_p4;
wire   [5:0] y_V_5_fu_427_p4;
wire   [5:0] y_V_6_fu_442_p4;
wire   [5:0] y_V_7_fu_457_p4;
wire   [5:0] y_V_8_fu_472_p4;
wire   [5:0] y_V_9_fu_487_p4;
wire   [5:0] y_V_10_fu_502_p4;
wire  signed [15:0] mul_ln1118_fu_651_p2;
wire  signed [15:0] mul_ln1118_1_fu_658_p2;
wire  signed [15:0] mul_ln1118_2_fu_665_p2;
wire  signed [15:0] mul_ln1118_3_fu_672_p2;
wire  signed [15:0] mul_ln1118_4_fu_679_p2;
wire  signed [15:0] mul_ln1118_5_fu_686_p2;
wire  signed [15:0] mul_ln1118_6_fu_693_p2;
wire  signed [15:0] mul_ln1118_7_fu_700_p2;
wire  signed [15:0] mul_ln1118_8_fu_707_p2;
wire  signed [15:0] mul_ln1118_9_fu_714_p2;
wire  signed [7:0] mul_ln1118_fu_651_p1;
wire  signed [15:0] sext_ln1116_fu_517_p1;
wire  signed [7:0] mul_ln1118_1_fu_658_p1;
wire  signed [7:0] mul_ln1118_2_fu_665_p1;
wire  signed [7:0] mul_ln1118_3_fu_672_p1;
wire  signed [7:0] mul_ln1118_4_fu_679_p1;
wire  signed [7:0] mul_ln1118_5_fu_686_p1;
wire  signed [7:0] mul_ln1118_6_fu_693_p1;
wire  signed [7:0] mul_ln1118_7_fu_700_p1;
wire  signed [7:0] mul_ln1118_8_fu_707_p1;
wire  signed [7:0] mul_ln1118_9_fu_714_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_reduce_2_fu_328_ap_start_reg = 1'b0;
end

softmax_exp_table1 #(
    .DataWidth( 12 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3),
    .address4(exp_table1_address4),
    .ce4(exp_table1_ce4),
    .q4(exp_table1_q4),
    .address5(exp_table1_address5),
    .ce5(exp_table1_ce5),
    .q5(exp_table1_q5),
    .address6(exp_table1_address6),
    .ce6(exp_table1_ce6),
    .q6(exp_table1_q6),
    .address7(exp_table1_address7),
    .ce7(exp_table1_ce7),
    .q7(exp_table1_q7),
    .address8(exp_table1_address8),
    .ce8(exp_table1_ce8),
    .q8(exp_table1_q8),
    .address9(exp_table1_address9),
    .ce9(exp_table1_ce9),
    .q9(exp_table1_q9)
);

softmax_invert_tag8j #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

reduce_2 grp_reduce_2_fu_328(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reduce_2_fu_328_ap_start),
    .ap_done(grp_reduce_2_fu_328_ap_done),
    .ap_idle(grp_reduce_2_fu_328_ap_idle),
    .ap_ready(grp_reduce_2_fu_328_ap_ready),
    .x_0_V_read(exp_res_0_V_reg_771),
    .x_1_V_read(exp_res_1_V_reg_777),
    .x_2_V_read(exp_res_2_V_reg_783),
    .x_3_V_read(exp_res_3_V_reg_789),
    .x_4_V_read(exp_res_4_V_reg_795),
    .x_5_V_read(exp_res_5_V_reg_801),
    .x_6_V_read(exp_res_6_V_reg_807),
    .x_7_V_read(exp_res_7_V_reg_813),
    .x_8_V_read(exp_res_8_V_reg_819),
    .x_9_V_read(exp_res_9_V_reg_825),
    .ap_return(grp_reduce_2_fu_328_ap_return)
);

myproject_mul_mulhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
myproject_mul_mulhbi_U256(
    .din0(exp_res_0_V_reg_771),
    .din1(mul_ln1118_fu_651_p1),
    .dout(mul_ln1118_fu_651_p2)
);

myproject_mul_mulhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
myproject_mul_mulhbi_U257(
    .din0(exp_res_1_V_reg_777),
    .din1(mul_ln1118_1_fu_658_p1),
    .dout(mul_ln1118_1_fu_658_p2)
);

myproject_mul_mulhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
myproject_mul_mulhbi_U258(
    .din0(exp_res_2_V_reg_783),
    .din1(mul_ln1118_2_fu_665_p1),
    .dout(mul_ln1118_2_fu_665_p2)
);

myproject_mul_mulhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
myproject_mul_mulhbi_U259(
    .din0(exp_res_3_V_reg_789),
    .din1(mul_ln1118_3_fu_672_p1),
    .dout(mul_ln1118_3_fu_672_p2)
);

myproject_mul_mulhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
myproject_mul_mulhbi_U260(
    .din0(exp_res_4_V_reg_795),
    .din1(mul_ln1118_4_fu_679_p1),
    .dout(mul_ln1118_4_fu_679_p2)
);

myproject_mul_mulhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
myproject_mul_mulhbi_U261(
    .din0(exp_res_5_V_reg_801),
    .din1(mul_ln1118_5_fu_686_p1),
    .dout(mul_ln1118_5_fu_686_p2)
);

myproject_mul_mulhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
myproject_mul_mulhbi_U262(
    .din0(exp_res_6_V_reg_807),
    .din1(mul_ln1118_6_fu_693_p1),
    .dout(mul_ln1118_6_fu_693_p2)
);

myproject_mul_mulhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
myproject_mul_mulhbi_U263(
    .din0(exp_res_7_V_reg_813),
    .din1(mul_ln1118_7_fu_700_p1),
    .dout(mul_ln1118_7_fu_700_p2)
);

myproject_mul_mulhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
myproject_mul_mulhbi_U264(
    .din0(exp_res_8_V_reg_819),
    .din1(mul_ln1118_8_fu_707_p1),
    .dout(mul_ln1118_8_fu_707_p2)
);

myproject_mul_mulhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
myproject_mul_mulhbi_U265(
    .din0(exp_res_9_V_reg_825),
    .din1(mul_ln1118_9_fu_714_p1),
    .dout(mul_ln1118_9_fu_714_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reduce_2_fu_328_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_reduce_2_fu_328_ap_start_reg <= 1'b1;
        end else if ((grp_reduce_2_fu_328_ap_ready == 1'b1)) begin
            grp_reduce_2_fu_328_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        exp_res_0_V_reg_771 <= exp_table1_q0;
        exp_res_1_V_reg_777 <= exp_table1_q1;
        exp_res_2_V_reg_783 <= exp_table1_q2;
        exp_res_3_V_reg_789 <= exp_table1_q3;
        exp_res_4_V_reg_795 <= exp_table1_q4;
        exp_res_5_V_reg_801 <= exp_table1_q5;
        exp_res_6_V_reg_807 <= exp_table1_q6;
        exp_res_7_V_reg_813 <= exp_table1_q7;
        exp_res_8_V_reg_819 <= exp_table1_q8;
        exp_res_9_V_reg_825 <= exp_table1_q9;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        exp_table1_ce4 = 1'b1;
    end else begin
        exp_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        exp_table1_ce5 = 1'b1;
    end else begin
        exp_table1_ce5 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        exp_table1_ce6 = 1'b1;
    end else begin
        exp_table1_ce6 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        exp_table1_ce7 = 1'b1;
    end else begin
        exp_table1_ce7 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        exp_table1_ce8 = 1'b1;
    end else begin
        exp_table1_ce8 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        exp_table1_ce9 = 1'b1;
    end else begin
        exp_table1_ce9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_reduce_2_fu_328_ap_done == 1'b1))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_0_V_ap_vld = 1'b1;
    end else begin
        res_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_1_V_ap_vld = 1'b1;
    end else begin
        res_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_2_V_ap_vld = 1'b1;
    end else begin
        res_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_3_V_ap_vld = 1'b1;
    end else begin
        res_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_4_V_ap_vld = 1'b1;
    end else begin
        res_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_5_V_ap_vld = 1'b1;
    end else begin
        res_5_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_6_V_ap_vld = 1'b1;
    end else begin
        res_6_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_7_V_ap_vld = 1'b1;
    end else begin
        res_7_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_8_V_ap_vld = 1'b1;
    end else begin
        res_8_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_9_V_ap_vld = 1'b1;
    end else begin
        res_9_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_reduce_2_fu_328_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign exp_table1_address0 = zext_ln250_fu_362_p1;

assign exp_table1_address1 = zext_ln250_1_fu_377_p1;

assign exp_table1_address2 = zext_ln250_2_fu_392_p1;

assign exp_table1_address3 = zext_ln250_3_fu_407_p1;

assign exp_table1_address4 = zext_ln250_4_fu_422_p1;

assign exp_table1_address5 = zext_ln250_5_fu_437_p1;

assign exp_table1_address6 = zext_ln250_6_fu_452_p1;

assign exp_table1_address7 = zext_ln250_7_fu_467_p1;

assign exp_table1_address8 = zext_ln250_8_fu_482_p1;

assign exp_table1_address9 = zext_ln250_9_fu_497_p1;

assign grp_reduce_2_fu_328_ap_start = grp_reduce_2_fu_328_ap_start_reg;

assign invert_table2_address0 = zext_ln258_fu_512_p1;

assign mul_ln1118_1_fu_658_p1 = sext_ln1116_fu_517_p1;

assign mul_ln1118_2_fu_665_p1 = sext_ln1116_fu_517_p1;

assign mul_ln1118_3_fu_672_p1 = sext_ln1116_fu_517_p1;

assign mul_ln1118_4_fu_679_p1 = sext_ln1116_fu_517_p1;

assign mul_ln1118_5_fu_686_p1 = sext_ln1116_fu_517_p1;

assign mul_ln1118_6_fu_693_p1 = sext_ln1116_fu_517_p1;

assign mul_ln1118_7_fu_700_p1 = sext_ln1116_fu_517_p1;

assign mul_ln1118_8_fu_707_p1 = sext_ln1116_fu_517_p1;

assign mul_ln1118_9_fu_714_p1 = sext_ln1116_fu_517_p1;

assign mul_ln1118_fu_651_p1 = sext_ln1116_fu_517_p1;

assign res_0_V = {{mul_ln1118_fu_651_p2[15:4]}};

assign res_1_V = {{mul_ln1118_1_fu_658_p2[15:4]}};

assign res_2_V = {{mul_ln1118_2_fu_665_p2[15:4]}};

assign res_3_V = {{mul_ln1118_3_fu_672_p2[15:4]}};

assign res_4_V = {{mul_ln1118_4_fu_679_p2[15:4]}};

assign res_5_V = {{mul_ln1118_5_fu_686_p2[15:4]}};

assign res_6_V = {{mul_ln1118_6_fu_693_p2[15:4]}};

assign res_7_V = {{mul_ln1118_7_fu_700_p2[15:4]}};

assign res_8_V = {{mul_ln1118_8_fu_707_p2[15:4]}};

assign res_9_V = {{mul_ln1118_9_fu_714_p2[15:4]}};

assign sext_ln1116_fu_517_p1 = $signed(invert_table2_q0);

assign y_V_10_fu_502_p4 = {{grp_reduce_2_fu_328_ap_return[11:6]}};

assign y_V_1_fu_367_p4 = {{data_1_V_read[11:6]}};

assign y_V_2_fu_382_p4 = {{data_2_V_read[11:6]}};

assign y_V_3_fu_397_p4 = {{data_3_V_read[11:6]}};

assign y_V_4_fu_412_p4 = {{data_4_V_read[11:6]}};

assign y_V_5_fu_427_p4 = {{data_5_V_read[11:6]}};

assign y_V_6_fu_442_p4 = {{data_6_V_read[11:6]}};

assign y_V_7_fu_457_p4 = {{data_7_V_read[11:6]}};

assign y_V_8_fu_472_p4 = {{data_8_V_read[11:6]}};

assign y_V_9_fu_487_p4 = {{data_9_V_read[11:6]}};

assign y_V_fu_352_p4 = {{data_0_V_read[11:6]}};

assign zext_ln250_1_fu_377_p1 = y_V_1_fu_367_p4;

assign zext_ln250_2_fu_392_p1 = y_V_2_fu_382_p4;

assign zext_ln250_3_fu_407_p1 = y_V_3_fu_397_p4;

assign zext_ln250_4_fu_422_p1 = y_V_4_fu_412_p4;

assign zext_ln250_5_fu_437_p1 = y_V_5_fu_427_p4;

assign zext_ln250_6_fu_452_p1 = y_V_6_fu_442_p4;

assign zext_ln250_7_fu_467_p1 = y_V_7_fu_457_p4;

assign zext_ln250_8_fu_482_p1 = y_V_8_fu_472_p4;

assign zext_ln250_9_fu_497_p1 = y_V_9_fu_487_p4;

assign zext_ln250_fu_362_p1 = y_V_fu_352_p4;

assign zext_ln258_fu_512_p1 = y_V_10_fu_502_p4;

endmodule //softmax
