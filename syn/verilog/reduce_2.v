// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reduce_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_0_V_read,
        x_1_V_read,
        x_2_V_read,
        x_3_V_read,
        x_4_V_read,
        x_5_V_read,
        x_6_V_read,
        x_7_V_read,
        x_8_V_read,
        x_9_V_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] x_0_V_read;
input  [11:0] x_1_V_read;
input  [11:0] x_2_V_read;
input  [11:0] x_3_V_read;
input  [11:0] x_4_V_read;
input  [11:0] x_5_V_read;
input  [11:0] x_6_V_read;
input  [11:0] x_7_V_read;
input  [11:0] x_8_V_read;
input  [11:0] x_9_V_read;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] ap_return;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_248_p2;
reg   [3:0] i_reg_473;
wire    ap_CS_fsm_state2;
wire   [1:0] i_1_fu_304_p2;
wire    ap_CS_fsm_state5;
wire   [11:0] right_0_V_fu_314_p3;
wire   [0:0] icmp_ln77_fu_298_p2;
wire   [11:0] right_0_V_1_fu_321_p3;
wire    grp_reduce_fu_230_ap_start;
wire    grp_reduce_fu_230_ap_done;
wire    grp_reduce_fu_230_ap_idle;
wire    grp_reduce_fu_230_ap_ready;
wire   [11:0] grp_reduce_fu_230_ap_return;
wire   [3:0] ap_phi_mux_i_0_phi_fu_166_p4;
reg   [3:0] i_0_reg_162;
wire    ap_CS_fsm_state4;
reg   [11:0] left_0_V_reg_174;
wire   [0:0] icmp_ln74_fu_242_p2;
reg   [11:0] p_Val2_2_reg_195;
reg   [11:0] p_Val2_s_reg_207;
reg   [1:0] i2_0_reg_219;
reg    grp_reduce_fu_230_ap_start_reg;
wire    ap_CS_fsm_state6;
reg   [11:0] left_7_V_fu_70;
wire    ap_CS_fsm_state3;
wire   [2:0] trunc_ln203_1_fu_254_p1;
reg   [11:0] left_7_V_1_fu_74;
reg   [11:0] left_7_V_2_fu_78;
reg   [11:0] left_7_V_3_fu_82;
reg   [11:0] left_7_V_4_fu_86;
reg   [11:0] left_7_V_5_fu_90;
reg   [11:0] left_7_V_6_fu_94;
reg   [11:0] left_7_V_7_fu_98;
wire   [0:0] trunc_ln203_fu_310_p1;
wire   [11:0] add_ln703_1_fu_360_p2;
wire   [11:0] add_ln703_fu_366_p2;
reg   [11:0] ap_return_preg;
reg   [5:0] ap_NS_fsm;
reg    ap_condition_299;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_reduce_fu_230_ap_start_reg = 1'b0;
#0 ap_return_preg = 12'd0;
end

reduce grp_reduce_fu_230(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reduce_fu_230_ap_start),
    .ap_done(grp_reduce_fu_230_ap_done),
    .ap_idle(grp_reduce_fu_230_ap_idle),
    .ap_ready(grp_reduce_fu_230_ap_ready),
    .x_0_V_read(left_7_V_fu_70),
    .x_1_V_read(left_7_V_1_fu_74),
    .x_2_V_read(left_7_V_2_fu_78),
    .x_3_V_read(left_7_V_3_fu_82),
    .x_4_V_read(left_7_V_4_fu_86),
    .x_5_V_read(left_7_V_5_fu_90),
    .x_6_V_read(left_7_V_6_fu_94),
    .x_7_V_read(left_7_V_7_fu_98),
    .ap_return(grp_reduce_fu_230_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 12'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) & (grp_reduce_fu_230_ap_done == 1'b1))) begin
            ap_return_preg <= add_ln703_fu_366_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reduce_fu_230_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln77_fu_298_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            grp_reduce_fu_230_ap_start_reg <= 1'b1;
        end else if ((grp_reduce_fu_230_ap_ready == 1'b1)) begin
            grp_reduce_fu_230_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i2_0_reg_219 <= 2'd0;
    end else if (((icmp_ln77_fu_298_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i2_0_reg_219 <= i_1_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_162 <= i_reg_473;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_162 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        if ((ap_phi_mux_i_0_phi_fu_166_p4 == 4'd0)) begin
            left_0_V_reg_174 <= x_0_V_read;
        end else if ((1'b1 == ap_condition_299)) begin
            left_0_V_reg_174 <= x_7_V_read;
        end else if ((ap_phi_mux_i_0_phi_fu_166_p4 == 4'd6)) begin
            left_0_V_reg_174 <= x_6_V_read;
        end else if ((ap_phi_mux_i_0_phi_fu_166_p4 == 4'd5)) begin
            left_0_V_reg_174 <= x_5_V_read;
        end else if ((ap_phi_mux_i_0_phi_fu_166_p4 == 4'd4)) begin
            left_0_V_reg_174 <= x_4_V_read;
        end else if ((ap_phi_mux_i_0_phi_fu_166_p4 == 4'd3)) begin
            left_0_V_reg_174 <= x_3_V_read;
        end else if ((ap_phi_mux_i_0_phi_fu_166_p4 == 4'd2)) begin
            left_0_V_reg_174 <= x_2_V_read;
        end else if ((ap_phi_mux_i_0_phi_fu_166_p4 == 4'd1)) begin
            left_0_V_reg_174 <= x_1_V_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_473 <= i_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (trunc_ln203_1_fu_254_p1 == 3'd1))) begin
        left_7_V_1_fu_74 <= left_0_V_reg_174;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (trunc_ln203_1_fu_254_p1 == 3'd2))) begin
        left_7_V_2_fu_78 <= left_0_V_reg_174;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (trunc_ln203_1_fu_254_p1 == 3'd3))) begin
        left_7_V_3_fu_82 <= left_0_V_reg_174;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (trunc_ln203_1_fu_254_p1 == 3'd4))) begin
        left_7_V_4_fu_86 <= left_0_V_reg_174;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (trunc_ln203_1_fu_254_p1 == 3'd5))) begin
        left_7_V_5_fu_90 <= left_0_V_reg_174;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (trunc_ln203_1_fu_254_p1 == 3'd6))) begin
        left_7_V_6_fu_94 <= left_0_V_reg_174;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (trunc_ln203_1_fu_254_p1 == 3'd7))) begin
        left_7_V_7_fu_98 <= left_0_V_reg_174;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (trunc_ln203_1_fu_254_p1 == 3'd0))) begin
        left_7_V_fu_70 <= left_0_V_reg_174;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_298_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_Val2_2_reg_195 <= right_0_V_fu_314_p3;
        p_Val2_s_reg_207 <= right_0_V_1_fu_321_p3;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (grp_reduce_fu_230_ap_done == 1'b1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_reduce_fu_230_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_reduce_fu_230_ap_done == 1'b1))) begin
        ap_return = add_ln703_fu_366_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln74_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln77_fu_298_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_reduce_fu_230_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_1_fu_360_p2 = (p_Val2_s_reg_207 + grp_reduce_fu_230_ap_return);

assign add_ln703_fu_366_p2 = (add_ln703_1_fu_360_p2 + p_Val2_2_reg_195);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_condition_299 = (~(ap_phi_mux_i_0_phi_fu_166_p4 == 4'd0) & ~(ap_phi_mux_i_0_phi_fu_166_p4 == 4'd6) & ~(ap_phi_mux_i_0_phi_fu_166_p4 == 4'd5) & ~(ap_phi_mux_i_0_phi_fu_166_p4 == 4'd4) & ~(ap_phi_mux_i_0_phi_fu_166_p4 == 4'd3) & ~(ap_phi_mux_i_0_phi_fu_166_p4 == 4'd2) & ~(ap_phi_mux_i_0_phi_fu_166_p4 == 4'd1));
end

assign ap_phi_mux_i_0_phi_fu_166_p4 = i_0_reg_162;

assign grp_reduce_fu_230_ap_start = grp_reduce_fu_230_ap_start_reg;

assign i_1_fu_304_p2 = (i2_0_reg_219 + 2'd1);

assign i_fu_248_p2 = (i_0_reg_162 + 4'd1);

assign icmp_ln74_fu_242_p2 = ((i_0_reg_162 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_298_p2 = ((i2_0_reg_219 == 2'd2) ? 1'b1 : 1'b0);

assign right_0_V_1_fu_321_p3 = ((trunc_ln203_fu_310_p1[0:0] === 1'b1) ? p_Val2_s_reg_207 : x_8_V_read);

assign right_0_V_fu_314_p3 = ((trunc_ln203_fu_310_p1[0:0] === 1'b1) ? x_9_V_read : p_Val2_2_reg_195);

assign trunc_ln203_1_fu_254_p1 = i_0_reg_162[2:0];

assign trunc_ln203_fu_310_p1 = i2_0_reg_219[0:0];

endmodule //reduce_2
