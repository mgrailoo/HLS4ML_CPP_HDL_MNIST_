-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    data_5_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    data_6_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    data_7_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    data_8_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    data_9_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    res_0_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_0_V_ap_vld : OUT STD_LOGIC;
    res_1_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_1_V_ap_vld : OUT STD_LOGIC;
    res_2_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_2_V_ap_vld : OUT STD_LOGIC;
    res_3_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_3_V_ap_vld : OUT STD_LOGIC;
    res_4_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_4_V_ap_vld : OUT STD_LOGIC;
    res_5_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_5_V_ap_vld : OUT STD_LOGIC;
    res_6_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_6_V_ap_vld : OUT STD_LOGIC;
    res_7_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_7_V_ap_vld : OUT STD_LOGIC;
    res_8_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_8_V_ap_vld : OUT STD_LOGIC;
    res_9_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_9_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of softmax is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal exp_table1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal exp_table1_ce0 : STD_LOGIC;
    signal exp_table1_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal exp_table1_ce1 : STD_LOGIC;
    signal exp_table1_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address2 : STD_LOGIC_VECTOR (5 downto 0);
    signal exp_table1_ce2 : STD_LOGIC;
    signal exp_table1_q2 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address3 : STD_LOGIC_VECTOR (5 downto 0);
    signal exp_table1_ce3 : STD_LOGIC;
    signal exp_table1_q3 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address4 : STD_LOGIC_VECTOR (5 downto 0);
    signal exp_table1_ce4 : STD_LOGIC;
    signal exp_table1_q4 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address5 : STD_LOGIC_VECTOR (5 downto 0);
    signal exp_table1_ce5 : STD_LOGIC;
    signal exp_table1_q5 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address6 : STD_LOGIC_VECTOR (5 downto 0);
    signal exp_table1_ce6 : STD_LOGIC;
    signal exp_table1_q6 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address7 : STD_LOGIC_VECTOR (5 downto 0);
    signal exp_table1_ce7 : STD_LOGIC;
    signal exp_table1_q7 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address8 : STD_LOGIC_VECTOR (5 downto 0);
    signal exp_table1_ce8 : STD_LOGIC;
    signal exp_table1_q8 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_table1_address9 : STD_LOGIC_VECTOR (5 downto 0);
    signal exp_table1_ce9 : STD_LOGIC;
    signal exp_table1_q9 : STD_LOGIC_VECTOR (11 downto 0);
    signal invert_table2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal invert_table2_ce0 : STD_LOGIC;
    signal invert_table2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal exp_res_0_V_reg_771 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exp_res_1_V_reg_777 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_2_V_reg_783 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_3_V_reg_789 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_4_V_reg_795 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_5_V_reg_801 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_6_V_reg_807 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_7_V_reg_813 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_8_V_reg_819 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_res_9_V_reg_825 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_reduce_2_fu_328_ap_ready : STD_LOGIC;
    signal grp_reduce_2_fu_328_ap_done : STD_LOGIC;
    signal grp_reduce_2_fu_328_ap_start : STD_LOGIC;
    signal grp_reduce_2_fu_328_ap_idle : STD_LOGIC;
    signal grp_reduce_2_fu_328_ap_return : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_reduce_2_fu_328_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln250_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_1_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_2_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_3_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_4_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_5_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_6_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_7_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_8_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_9_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln258_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal y_V_fu_352_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_V_1_fu_367_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_V_2_fu_382_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_V_3_fu_397_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_V_4_fu_412_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_V_5_fu_427_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_V_6_fu_442_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_V_7_fu_457_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_V_8_fu_472_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_V_9_fu_487_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_V_10_fu_502_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln1118_fu_651_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_1_fu_658_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_2_fu_665_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_3_fu_672_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_4_fu_679_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_5_fu_686_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_6_fu_693_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_7_fu_700_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_8_fu_707_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_9_fu_714_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_651_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1116_fu_517_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_1_fu_658_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_2_fu_665_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_3_fu_672_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_4_fu_679_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_5_fu_686_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_6_fu_693_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_7_fu_700_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_8_fu_707_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_9_fu_714_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component reduce_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_0_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        x_1_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        x_2_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        x_3_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        x_4_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        x_5_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        x_6_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        x_7_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        x_8_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        x_9_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component myproject_mul_mulhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component softmax_exp_table1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address3 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address4 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address5 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address6 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address7 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address8 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address9 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component softmax_invert_tag8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    exp_table1_U : component softmax_exp_table1
    generic map (
        DataWidth => 12,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table1_address0,
        ce0 => exp_table1_ce0,
        q0 => exp_table1_q0,
        address1 => exp_table1_address1,
        ce1 => exp_table1_ce1,
        q1 => exp_table1_q1,
        address2 => exp_table1_address2,
        ce2 => exp_table1_ce2,
        q2 => exp_table1_q2,
        address3 => exp_table1_address3,
        ce3 => exp_table1_ce3,
        q3 => exp_table1_q3,
        address4 => exp_table1_address4,
        ce4 => exp_table1_ce4,
        q4 => exp_table1_q4,
        address5 => exp_table1_address5,
        ce5 => exp_table1_ce5,
        q5 => exp_table1_q5,
        address6 => exp_table1_address6,
        ce6 => exp_table1_ce6,
        q6 => exp_table1_q6,
        address7 => exp_table1_address7,
        ce7 => exp_table1_ce7,
        q7 => exp_table1_q7,
        address8 => exp_table1_address8,
        ce8 => exp_table1_ce8,
        q8 => exp_table1_q8,
        address9 => exp_table1_address9,
        ce9 => exp_table1_ce9,
        q9 => exp_table1_q9);

    invert_table2_U : component softmax_invert_tag8j
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table2_address0,
        ce0 => invert_table2_ce0,
        q0 => invert_table2_q0);

    grp_reduce_2_fu_328 : component reduce_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reduce_2_fu_328_ap_start,
        ap_done => grp_reduce_2_fu_328_ap_done,
        ap_idle => grp_reduce_2_fu_328_ap_idle,
        ap_ready => grp_reduce_2_fu_328_ap_ready,
        x_0_V_read => exp_res_0_V_reg_771,
        x_1_V_read => exp_res_1_V_reg_777,
        x_2_V_read => exp_res_2_V_reg_783,
        x_3_V_read => exp_res_3_V_reg_789,
        x_4_V_read => exp_res_4_V_reg_795,
        x_5_V_read => exp_res_5_V_reg_801,
        x_6_V_read => exp_res_6_V_reg_807,
        x_7_V_read => exp_res_7_V_reg_813,
        x_8_V_read => exp_res_8_V_reg_819,
        x_9_V_read => exp_res_9_V_reg_825,
        ap_return => grp_reduce_2_fu_328_ap_return);

    myproject_mul_mulhbi_U256 : component myproject_mul_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => exp_res_0_V_reg_771,
        din1 => mul_ln1118_fu_651_p1,
        dout => mul_ln1118_fu_651_p2);

    myproject_mul_mulhbi_U257 : component myproject_mul_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => exp_res_1_V_reg_777,
        din1 => mul_ln1118_1_fu_658_p1,
        dout => mul_ln1118_1_fu_658_p2);

    myproject_mul_mulhbi_U258 : component myproject_mul_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => exp_res_2_V_reg_783,
        din1 => mul_ln1118_2_fu_665_p1,
        dout => mul_ln1118_2_fu_665_p2);

    myproject_mul_mulhbi_U259 : component myproject_mul_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => exp_res_3_V_reg_789,
        din1 => mul_ln1118_3_fu_672_p1,
        dout => mul_ln1118_3_fu_672_p2);

    myproject_mul_mulhbi_U260 : component myproject_mul_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => exp_res_4_V_reg_795,
        din1 => mul_ln1118_4_fu_679_p1,
        dout => mul_ln1118_4_fu_679_p2);

    myproject_mul_mulhbi_U261 : component myproject_mul_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => exp_res_5_V_reg_801,
        din1 => mul_ln1118_5_fu_686_p1,
        dout => mul_ln1118_5_fu_686_p2);

    myproject_mul_mulhbi_U262 : component myproject_mul_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => exp_res_6_V_reg_807,
        din1 => mul_ln1118_6_fu_693_p1,
        dout => mul_ln1118_6_fu_693_p2);

    myproject_mul_mulhbi_U263 : component myproject_mul_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => exp_res_7_V_reg_813,
        din1 => mul_ln1118_7_fu_700_p1,
        dout => mul_ln1118_7_fu_700_p2);

    myproject_mul_mulhbi_U264 : component myproject_mul_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => exp_res_8_V_reg_819,
        din1 => mul_ln1118_8_fu_707_p1,
        dout => mul_ln1118_8_fu_707_p2);

    myproject_mul_mulhbi_U265 : component myproject_mul_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => exp_res_9_V_reg_825,
        din1 => mul_ln1118_9_fu_714_p1,
        dout => mul_ln1118_9_fu_714_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_reduce_2_fu_328_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reduce_2_fu_328_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_reduce_2_fu_328_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reduce_2_fu_328_ap_ready = ap_const_logic_1)) then 
                    grp_reduce_2_fu_328_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                exp_res_0_V_reg_771 <= exp_table1_q0;
                exp_res_1_V_reg_777 <= exp_table1_q1;
                exp_res_2_V_reg_783 <= exp_table1_q2;
                exp_res_3_V_reg_789 <= exp_table1_q3;
                exp_res_4_V_reg_795 <= exp_table1_q4;
                exp_res_5_V_reg_801 <= exp_table1_q5;
                exp_res_6_V_reg_807 <= exp_table1_q6;
                exp_res_7_V_reg_813 <= exp_table1_q7;
                exp_res_8_V_reg_819 <= exp_table1_q8;
                exp_res_9_V_reg_825 <= exp_table1_q9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_reduce_2_fu_328_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_reduce_2_fu_328_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exp_table1_address0 <= zext_ln250_fu_362_p1(6 - 1 downto 0);
    exp_table1_address1 <= zext_ln250_1_fu_377_p1(6 - 1 downto 0);
    exp_table1_address2 <= zext_ln250_2_fu_392_p1(6 - 1 downto 0);
    exp_table1_address3 <= zext_ln250_3_fu_407_p1(6 - 1 downto 0);
    exp_table1_address4 <= zext_ln250_4_fu_422_p1(6 - 1 downto 0);
    exp_table1_address5 <= zext_ln250_5_fu_437_p1(6 - 1 downto 0);
    exp_table1_address6 <= zext_ln250_6_fu_452_p1(6 - 1 downto 0);
    exp_table1_address7 <= zext_ln250_7_fu_467_p1(6 - 1 downto 0);
    exp_table1_address8 <= zext_ln250_8_fu_482_p1(6 - 1 downto 0);
    exp_table1_address9 <= zext_ln250_9_fu_497_p1(6 - 1 downto 0);

    exp_table1_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            exp_table1_ce0 <= ap_const_logic_1;
        else 
            exp_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            exp_table1_ce1 <= ap_const_logic_1;
        else 
            exp_table1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce2_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            exp_table1_ce2 <= ap_const_logic_1;
        else 
            exp_table1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce3_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            exp_table1_ce3 <= ap_const_logic_1;
        else 
            exp_table1_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce4_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            exp_table1_ce4 <= ap_const_logic_1;
        else 
            exp_table1_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce5_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            exp_table1_ce5 <= ap_const_logic_1;
        else 
            exp_table1_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce6_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            exp_table1_ce6 <= ap_const_logic_1;
        else 
            exp_table1_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce7_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            exp_table1_ce7 <= ap_const_logic_1;
        else 
            exp_table1_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce8_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            exp_table1_ce8 <= ap_const_logic_1;
        else 
            exp_table1_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce9_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            exp_table1_ce9 <= ap_const_logic_1;
        else 
            exp_table1_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    grp_reduce_2_fu_328_ap_start <= grp_reduce_2_fu_328_ap_start_reg;
    invert_table2_address0 <= zext_ln258_fu_512_p1(6 - 1 downto 0);

    invert_table2_ce0_assign_proc : process(ap_CS_fsm_state3, grp_reduce_2_fu_328_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_reduce_2_fu_328_ap_done = ap_const_logic_1))) then 
            invert_table2_ce0 <= ap_const_logic_1;
        else 
            invert_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_1_fu_658_p1 <= sext_ln1116_fu_517_p1(8 - 1 downto 0);
    mul_ln1118_2_fu_665_p1 <= sext_ln1116_fu_517_p1(8 - 1 downto 0);
    mul_ln1118_3_fu_672_p1 <= sext_ln1116_fu_517_p1(8 - 1 downto 0);
    mul_ln1118_4_fu_679_p1 <= sext_ln1116_fu_517_p1(8 - 1 downto 0);
    mul_ln1118_5_fu_686_p1 <= sext_ln1116_fu_517_p1(8 - 1 downto 0);
    mul_ln1118_6_fu_693_p1 <= sext_ln1116_fu_517_p1(8 - 1 downto 0);
    mul_ln1118_7_fu_700_p1 <= sext_ln1116_fu_517_p1(8 - 1 downto 0);
    mul_ln1118_8_fu_707_p1 <= sext_ln1116_fu_517_p1(8 - 1 downto 0);
    mul_ln1118_9_fu_714_p1 <= sext_ln1116_fu_517_p1(8 - 1 downto 0);
    mul_ln1118_fu_651_p1 <= sext_ln1116_fu_517_p1(8 - 1 downto 0);
    res_0_V <= mul_ln1118_fu_651_p2(15 downto 4);

    res_0_V_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_0_V_ap_vld <= ap_const_logic_1;
        else 
            res_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_1_V <= mul_ln1118_1_fu_658_p2(15 downto 4);

    res_1_V_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_1_V_ap_vld <= ap_const_logic_1;
        else 
            res_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_2_V <= mul_ln1118_2_fu_665_p2(15 downto 4);

    res_2_V_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_2_V_ap_vld <= ap_const_logic_1;
        else 
            res_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_3_V <= mul_ln1118_3_fu_672_p2(15 downto 4);

    res_3_V_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_3_V_ap_vld <= ap_const_logic_1;
        else 
            res_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_4_V <= mul_ln1118_4_fu_679_p2(15 downto 4);

    res_4_V_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_4_V_ap_vld <= ap_const_logic_1;
        else 
            res_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_5_V <= mul_ln1118_5_fu_686_p2(15 downto 4);

    res_5_V_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_5_V_ap_vld <= ap_const_logic_1;
        else 
            res_5_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_6_V <= mul_ln1118_6_fu_693_p2(15 downto 4);

    res_6_V_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_6_V_ap_vld <= ap_const_logic_1;
        else 
            res_6_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_7_V <= mul_ln1118_7_fu_700_p2(15 downto 4);

    res_7_V_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_7_V_ap_vld <= ap_const_logic_1;
        else 
            res_7_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_8_V <= mul_ln1118_8_fu_707_p2(15 downto 4);

    res_8_V_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_8_V_ap_vld <= ap_const_logic_1;
        else 
            res_8_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_9_V <= mul_ln1118_9_fu_714_p2(15 downto 4);

    res_9_V_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_9_V_ap_vld <= ap_const_logic_1;
        else 
            res_9_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1116_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table2_q0),16));

    y_V_10_fu_502_p4 <= grp_reduce_2_fu_328_ap_return(11 downto 6);
    y_V_1_fu_367_p4 <= data_1_V_read(11 downto 6);
    y_V_2_fu_382_p4 <= data_2_V_read(11 downto 6);
    y_V_3_fu_397_p4 <= data_3_V_read(11 downto 6);
    y_V_4_fu_412_p4 <= data_4_V_read(11 downto 6);
    y_V_5_fu_427_p4 <= data_5_V_read(11 downto 6);
    y_V_6_fu_442_p4 <= data_6_V_read(11 downto 6);
    y_V_7_fu_457_p4 <= data_7_V_read(11 downto 6);
    y_V_8_fu_472_p4 <= data_8_V_read(11 downto 6);
    y_V_9_fu_487_p4 <= data_9_V_read(11 downto 6);
    y_V_fu_352_p4 <= data_0_V_read(11 downto 6);
    zext_ln250_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_fu_367_p4),64));
    zext_ln250_2_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_fu_382_p4),64));
    zext_ln250_3_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_fu_397_p4),64));
    zext_ln250_4_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_4_fu_412_p4),64));
    zext_ln250_5_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_5_fu_427_p4),64));
    zext_ln250_6_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_6_fu_442_p4),64));
    zext_ln250_7_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_7_fu_457_p4),64));
    zext_ln250_8_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_8_fu_472_p4),64));
    zext_ln250_9_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_9_fu_487_p4),64));
    zext_ln250_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_fu_352_p4),64));
    zext_ln258_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_10_fu_502_p4),64));
end behav;
