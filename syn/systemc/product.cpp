// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "product.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic product::ap_const_logic_1 = sc_dt::Log_1;
const bool product::ap_const_boolean_1 = true;
const sc_lv<32> product::ap_const_lv32_2 = "10";
const sc_lv<32> product::ap_const_lv32_B = "1011";
const sc_logic product::ap_const_logic_0 = sc_dt::Log_0;

product::product(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( r_V_4_fu_32_p2 );

    SC_METHOD(thread_r_V_4_fu_32_p0);
    sensitive << ( a_V );

    SC_METHOD(thread_r_V_4_fu_32_p1);
    sensitive << ( w_V );

    SC_METHOD(thread_r_V_4_fu_32_p2);
    sensitive << ( r_V_4_fu_32_p0 );
    sensitive << ( r_V_4_fu_32_p1 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "product_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_V, "(port)a_V");
    sc_trace(mVcdFile, w_V, "(port)w_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, r_V_4_fu_32_p0, "r_V_4_fu_32_p0");
    sc_trace(mVcdFile, r_V_4_fu_32_p1, "r_V_4_fu_32_p1");
    sc_trace(mVcdFile, r_V_4_fu_32_p2, "r_V_4_fu_32_p2");
#endif

    }
}

product::~product() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void product::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void product::thread_ap_return() {
    ap_return = r_V_4_fu_32_p2.read().range(11, 2);
}

void product::thread_r_V_4_fu_32_p0() {
    r_V_4_fu_32_p0 = a_V.read();
}

void product::thread_r_V_4_fu_32_p1() {
    r_V_4_fu_32_p1 = w_V.read();
}

void product::thread_r_V_4_fu_32_p2() {
    r_V_4_fu_32_p2 = (!r_V_4_fu_32_p0.read().is_01() || !r_V_4_fu_32_p1.read().is_01())? sc_lv<12>(): sc_bigint<6>(r_V_4_fu_32_p0.read()) * sc_bigint<6>(r_V_4_fu_32_p1.read());
}

}

