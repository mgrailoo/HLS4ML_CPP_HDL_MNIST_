// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _reduce_1_HH_
#define _reduce_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct reduce_1 : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<12> > x_0_V_read;
    sc_in< sc_lv<12> > x_1_V_read;
    sc_in< sc_lv<12> > x_2_V_read;
    sc_in< sc_lv<12> > x_3_V_read;
    sc_out< sc_lv<12> > ap_return;


    // Module declarations
    reduce_1(sc_module_name name);
    SC_HAS_PROCESS(reduce_1);

    ~reduce_1();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<2> > i_fu_120_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<12> > left_0_V_fu_130_p3;
    sc_signal< sc_lv<1> > icmp_ln74_fu_114_p2;
    sc_signal< sc_lv<12> > left_0_V_1_fu_137_p3;
    sc_signal< sc_lv<2> > i_2_fu_150_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<12> > right_0_V_fu_160_p3;
    sc_signal< sc_lv<1> > icmp_ln77_fu_144_p2;
    sc_signal< sc_lv<12> > right_0_V_2_fu_167_p3;
    sc_signal< sc_lv<12> > p_Val2_4_reg_46;
    sc_signal< sc_lv<12> > p_Val2_s_reg_58;
    sc_signal< sc_lv<2> > i_0_reg_70;
    sc_signal< sc_lv<12> > p_Val2_6_reg_81;
    sc_signal< sc_lv<12> > p_Val2_5_reg_92;
    sc_signal< sc_lv<2> > i2_0_reg_103;
    sc_signal< sc_lv<1> > trunc_ln203_fu_126_p1;
    sc_signal< sc_lv<1> > trunc_ln203_2_fu_156_p1;
    sc_signal< sc_lv<12> > add_ln703_2_fu_180_p2;
    sc_signal< sc_lv<12> > add_ln703_1_fu_174_p2;
    sc_signal< sc_lv<12> > add_ln703_fu_186_p2;
    sc_signal< sc_lv<12> > ap_return_preg;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<12> ap_const_lv12_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln703_1_fu_174_p2();
    void thread_add_ln703_2_fu_180_p2();
    void thread_add_ln703_fu_186_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_i_2_fu_150_p2();
    void thread_i_fu_120_p2();
    void thread_icmp_ln74_fu_114_p2();
    void thread_icmp_ln77_fu_144_p2();
    void thread_left_0_V_1_fu_137_p3();
    void thread_left_0_V_fu_130_p3();
    void thread_right_0_V_2_fu_167_p3();
    void thread_right_0_V_fu_160_p3();
    void thread_trunc_ln203_2_fu_156_p1();
    void thread_trunc_ln203_fu_126_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
